module Lab3Part3(SW,LEDR,KEY,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5);
	input [7:0]SW;
	input [2:0]KEY;
	output [9:0]LEDR;
	output [6:0]HEX0;
	output [6:0]HEX1;
	output [6:0]HEX2;
	output [6:0]HEX3;
	output [6:0]HEX4;
	output [6:0]HEX5;	
	use_ALU u1(SW[7:4],SW[3:0],KEY[2:0],LEDR[7:0],HEX0,HEX2,HEX4,HEX5,HEX1,HEX3);
endmodule

module use_ALU(A,B,ALUSelect,ALUout,HEX0,HEX2,HEX4,HEX5,HEX1,HEX3);
	input [3:0]A,B;
	input [2:0]ALUSelect;
	output [7:0]ALUout;
	output [6:0]HEX0;
	output [6:0]HEX2;
	output [6:0]HEX4;
	output [6:0]HEX5;
	output [6:0]HEX1;
	output [6:0]HEX3;
	ALU a1(.A(A),.B(B),.ALUSelect(ALUSelect),.ALUout(ALUout));
	Display_ALU d1(A,B,ALUSelect,ALUout,HEX0,HEX2,HEX4,HEX5,HEX1,HEX3);
endmodule

module Display_ALU(A,B,ALUSelect,ALUout,HEX0,HEX2,HEX4,HEX5,HEX1,HEX3);
	input [3:0]A,B;
	input [2:0]ALUSelect;
	input [7:0]ALUout;
	output [6:0]HEX0;
	output [6:0]HEX1;
	output [6:0]HEX2;
	output [6:0]HEX3;
	output [6:0]HEX4;
	output [6:0]HEX5;
	assign HEX1[6] = 1;
	assign HEX3[6] = 1;
	hex_decode h2(A[0],A[1],A[2],A[3],HEX2[0],HEX2[1],HEX2[2],HEX2[3],HEX2[4],HEX2[5],HEX2[6]);
	hex_decode h0(B[0],B[1],B[2],B[3],HEX0[0],HEX0[1],HEX0[2],HEX0[3],HEX0[4],HEX0[5],HEX0[6]);
	hex_decode h4(ALUout[0],ALUout[1],ALUout[2],ALUout[3],HEX4[0],HEX4[1],HEX4[2],HEX4[3],HEX4[4],HEX4[5],HEX4[6]);
	hex_decode h5(ALUout[4],ALUout[5],ALUout[6],ALUout[7],HEX5[0],HEX5[1],HEX5[2],HEX5[3],HEX5[4],HEX5[5],HEX5[6]);
endmodule

module ALU(A, B, ALUSelect, ALUout);
	input [3:0]A,B;
	input [2:0]ALUSelect;
	output reg [7:0]ALUout;
	wire [4:0]C1;
	Ripple_carry_adder_4bit r1(.A(A[3:0]),.B(B[3:0]),.S(C1[3:0]),.Cin(1'b0),.Cout(C1[4]));
	always@(*)
		case (ALUSelect[2:0])
			3'b111: ALUout = {3'b000, C1};
			3'b110: ALUout = A + B;
			3'b101: ALUout = {~(A & B) , ~(A ^ B)};
			3'b100: ALUout =  | {A,B}; //reduction OR operator
			3'b011: ALUout = ((A[1]&~A[2]&~A[3]&~A[0]) | (~A[1]&A[2]&~A[3]&~A[0]) | (~A[1]&~A[2]&A[3]&~A[0]) | (~A[1]&~A[2]&~A[3]&A[0])) & ((~B[1]&~B[2]&B[3]&B[0]) | (B[1]&~B[2]&~B[3]&B[0])| (~B[1]&B[2]&~B[3]&B[0]) | (~B[1]&B[2]&B[3]&~B[0]) | (B[1]&~B[2]&B[3]&~B[0]) | (B[1]&B[2]&~B[3]&~B[0])) ? (8'b11110000) : (8'b00000000);
			3'b010: ALUout = {A[3:0],~B[3:0]};
			default: ALUout = 8'b00000000;
		endcase
endmodule

module Ripple_carry_adder_4bit(A,B,S,Cin,Cout);
	input [3:0]A,B;
	input Cin;
	output [3:0]S;
	output Cout;
	wire C1,C2,C3;
	FullAdder FA0(A[0],B[0],Cin,S[0],C1);
	FullAdder FA1(A[1],B[1],C1,S[1],C2);
	FullAdder FA2(A[2],B[2],C2,S[2],C3);
	FullAdder FA3(A[3],B[3],C3,S[3],Cout);
endmodule

module FullAdder(x,y,cin,s,cout);
	input x,y;
	input cin;
	output s;
	output cout;
	assign s = cin ^ x ^ y;
	assign cout =  (x&cin) |  (x&y) |  (y&cin) ;
endmodule

module hex_decode(C0,C1,C2,C3,F0,F1,F2,F3,F4,F5,F6);
	input C0,C1,C2,C3;
	output F0,F1,F2,F3,F4,F5,F6;
	assign F0 = C0&~C1&~C2&~C3 | ~C3&C2&~C1&~C0 | C3&C2&~C1&C0 | C3&~C2&C1&C0;
	assign F1 = C0&~C1&C2&~C3 | ~C0&C1&C2&~C3 | C0&C1&~C2&C3 | ~C0&~C1&C2&C3 | ~C0&C1&C2&C3 | C0&C1&C2&C3;
	assign F2 = ~C0&C1&~C2&~C3 | ~C0&~C1&C2&C3 | C0&C1&C2&C3 | ~C0&C1&C2&C3;
	assign F3 = C0&~C1&~C2&~C3 | ~C0&~C1&C2&~C3 | C0&C1&C2&~C3 | ~C0&C1&~C2&C3 | C0&C1&C2&C3;
	assign F4 = C0&~C1&~C2&~C3 | C0&C1&~C2&~C3 | ~C0&~C1&C2&~C3 | C0&~C1&C2&~C3 | C0&C1&C2&~C3 | C0&~C1&~C2&C3;
	assign F5 = C0&~C1&~C2&~C3 | ~C0&C1&~C2&~C3 | C0&C1&~C2&~C3 | C0&C1&C2&~C3 | C0&~C1&C2&C3;
	assign F6 = ~C0&~C1&~C2&~C3 | C0&~C1&~C2&~C3 | C0&C1&C2&~C3 | ~C0&~C1&C2&C3;
endmodule                                                                                                               
